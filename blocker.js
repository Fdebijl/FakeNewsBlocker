(function (){
	"use strict";
	
	var url = "", art = "", line = 0, then = "", fromCache = false, warnText = "", type = 0, types = [], fullblock = false, rval = "", index = 0, notes = "",
	tab = window.location.toString(), ael = 0, aels = document.getElementsByTagName('a'), now = new Date(), blockLists = [], fullList = new Object, blacklist = "";
	var weekFromNow = new Date(now.getTime() + 604800000);
	now.setHours(0,0,0,0);
	fullList.sites = [];
			
	function checkList(listText, listURL) {
		var lines = listText.split('\n');
		var errorCount = 0;
		
		for (line = 0; line < lines.length; line++) {
			if ((lines[line]).split(',')[0] == null) {
				console.error("Blocklist syntax error on line " + line + ": first argument (Domain URL) is missing! Origin: " + listURL);
				errorCount++;
			} else if (!(lines[line]).split(',')[1] == null) {
				console.error("Blocklist syntax error on line " + line + ": second argument (Proof URL) is missing! Origin: " + listURL);
				errorCount++;
			} else if (!(lines[line]).split(',')[2] == null) {
				console.error("Blocklist syntax error on line " + line + ": first argument (Domain type) is missing! Origin: " + listURL);
				errorCount++;				
			} else if (errorCount > 0) {
				return false;
			} else {
				return true;
			}
		}
	}
		
	function retrieve(key) {
		chrome.storage.local.get(key, function(result){
			rval = result[key];
		});	return rval;
	}
	
	function getPat(u) {
		u = u.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
		return new RegExp('(http|https)(:\/\/)(.+|)(' + u + ')', 'i');
	}
	
	// Runtime functions	
	window.onload = function() {
		getLists();
		document.styleSheets[0].addRule('.FakeNews_link:before','content: url(https://github.com/Fdebijl/FakeNewsBlocker/raw/master/logo16_fake.png); display: inline !important; visibility: visible !important; height: 1em !important; width: 1em !important; z-index: 999999999 !important; paddhing: .3em !important; ');
	};
	
	// Retrieve all the lists as set in options. If none are set, load the default list from our Github repo
	function getLists() {
		chrome.storage.sync.get({
			lists: "https://raw.githubusercontent.com/Fdebijl/FakeNewsBlocker/master/blocklist.txt",
			blacklist: false,
			types: [1,2],
			fullblock: false
		}, function(items) {

			if (items.lists.split(/\r\n|\r|\n/).length > 1) {
				blockLists = (items.lists.split('\n'));
			} else {
				blockLists = [items.lists];
			}
			
			types = items.types;
			fullblock = items.fullblock;
			
			if (items.blacklist) {
				blacklist = items.blacklist;
			}

			if ((blockLists.join() + blacklist) != retrieve("FakeNews_prevlist")) {
				// Setting has changed since we last imported the blocklists, time to craft a new master list
				loadFile(1);
			} else {
				loadFile();	
			}	
		});
	}
	
	// Import the blocklists as generated by getLists
	function loadFile(skipCheck) {		
		if (retrieve("FakeNews_blocklist") != null && skipCheck !== 1) {
			then = retrieve("FakeNews_expires");
			if (then < now || typeof(then) == null) {
				loadFile(1);
			} else {
				fromCache = true;
				matchURL();
			}
		} else {
			buildList();
		}
	} 
	
	// Construct our master blocklist from all supplied URL's and the one-off blacklist
	function buildList() {
		var link = blockLists[index];
		var limit = blockLists.length;
		
		if (index === limit) {
			// Append individual blacklisted sites to the master blocklist
			fullList += blacklist;
	
			chrome.storage.local.set({
				'FakeNews_blocklist': fullList.toString,
				'FakeNews_expires': weekFromNow.toString,
				'FakeNews_prevlist': (blockLists.join() + blacklist)
			}, function() {
				matchURL();
			});
	
			return;
		}
		
		var reader = new XMLHttpRequest();
		reader.open('get', link, true); 
		reader.onreadystatechange = function() {		
			if (reader.readyState === 4) {
				var exar = blockLists[index].split(".");
				
				if (exar[exar.length - 1] === "json") {
					try {
						var thisList = JSON.parse(reader.responseText);
					} catch (e) {
						alert(e + " - Invalid JSON in blocklist at " + link);
					}
					
					for (j = 0; j < thisList.sites; j++) {
						var x = {
							"url": thisList.sites[j].url,
							"type": thisList.sites[j].type,
							"proof": thisList.sites[j].proof,
							"notes": thisList.sites[j].notes,
							"origin": blockLists[index],
							"name": thisList.name,
							"author": thisList.author,
							"version": thisList.version,
							"kind": "advanced"
						};
						fullList.sites.push(x);
					}
				} else {
					if (checkList(reader.responseText, blockLists[index]) === false) {
						alert("One of your blocklists contains invalid syntax and may cause errors! Check the log (F12) for more details.");
					}
					
					var listArray = reader.responseText.split("\n");
					url = (listArray[k]).split(',')[0];	
					type = (listArray[k]).split(',')[1];	
					art = (listArray[k]).split(',')[2];	
					notes = (listArray[k]).split(',')[3];	
					
					for (k = 0; k < listArray.length; k++) {
						var x = {
							"url": (listArray[k]).split(',')[0],
							"type": (listArray[k]).split(',')[1],
							"proof": (listArray[k]).split(',')[2],
							"notes": (listArray[k]).split(',')[3],
							"origin": blockLists[index],
							"kind": "simple"
						};
						fullList.sites.push(x);
					}
				}
					
				index++;
				buildList();	
			}
		};
		reader.send(null);
	}
		
	function matchURL() {
		var lines = fromCache ? retrieve("FakeNews_blocklist").split('\n') : fullList.split('\n');
		warnText = fromCache ? "(from cache)" : "";
		
		// Looping over the master blocklist
		// lines: array of all lines in the master blocklist
		// line: pointer (index) for the current line
		mainloop:
		for (line = 0; line < lines.length; line++) {
			// REWRITE FOR OBJECT NOTATION
			if (tab.match(getPat(url)) && url !== "" && types.indexOf(type) > -1 && fullblock) {
				var blockr = document.createElement('div');
				var blockrCore = document.createElement('div');
				var blockrImage = document.createElement('img');
				var blockrButton = document.createElement('button');
				
				blockrImage.src = chrome.extension.getURL("icons/logo128_fake.png");
								
				var blockrStyle = 'display:block;position:fixed;top:0;left:0;height:100vh;width:100vw;background:#FFF;content:"";z-index:99999999999999999999999999;opacity:0.97';
				var blockrCoreStyle = 'display:flex;flex-flow: column wrap;justify-content:center;align-items: center;align-content: center;width: 100%;height: 100%;font-size: 22px;';
				var blockrImageStyle = 'margin-bottom: 10px;';
				var blockrButtonStyle = 'font-size: 14px; margin-top: 20px;';
				
				blockr.style.cssText += ';' + blockrStyle;
				blockrCore.style.cssText += ';' + blockrCoreStyle;
				blockrImage.style.cssText += ';' + blockrImageStyle;
				blockrButton.style.cssText += ';' + blockrButtonStyle;
				
				blockr.id = "FNB_blockrmodal";
				blockrCore.appendChild(blockrImage);
				blockrCore.appendChild(document.createTextNode(chrome.i18n.getMessage("Attent", url)));
				blockrButton.appendChild(document.createTextNode("Continue anyway"));
				blockrButton.id = "FNB_continueButton";
				blockrCore.appendChild(blockrButton);
				
				blockr.appendChild(blockrCore);
				document.body.appendChild(blockr);			
				
				document.getElementById("FNB_continueButton").addEventListener("click", function() {
					document.body.removeChild(document.getElementById("FNB_blockrmodal"));
				});
			} else if (tab.match(getPat(url)) && url !== "" && types.indexOf(type) > -1) {
				chrome.runtime.sendMessage({
					t: "notu", 
					l: url
				});
				
				// Deprecated - will be replaced with populating of popup
				if (art) {
					console.warn("Supplied proof " + warnText + ": " + art + notes ? " \nAdditional notes: " + notes : "");
				}
			}
			
			for (ael = 0; ael < aels.length; ael++) {
                if((aels[ael].href).match(getPat(url)) && url !== "" && (aels[ael].href) !== "" && url !== location.host.replace('www.','') && types.indexOf(type) > -1) {
					aels[ael].className += " FakeNews_link"; 
					aels[ael].setAttribute('title', "Possible fake news");
				}	
			}
			
			// To-do: pop-up displays data about this page and the blocklist that the block originated from
			// https://stackoverflow.com/questions/31111721/pass-a-variable-from-content-script-to-popup
			// Should respond with info like proof, type and notes - if list type is advanced also respond with 
			/*
			chrome.runtime.onMessage.addListener(
				function(message, sender, sendResponse) {
					switch(message.type) {
						case "getCount":
							sendResponse(count);
                			break;
						default:
							console.error("Unrecognised message: ", message);
					}
    			}
			); */
    	}
	}
})();